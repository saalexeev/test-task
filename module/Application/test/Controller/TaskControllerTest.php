<?php
/**
 * Created by PhpStorm.
 * User: Stanislav
 * Date: 24.11.2018
 * Time: 19:46
 */

namespace Application\Controller;

use Zend\Cache\Storage\StorageInterface;
use Zend\Stdlib\ArrayUtils;
use Zend\Test\PHPUnit\Controller\AbstractHttpControllerTestCase;

class TaskControllerTest extends AbstractHttpControllerTestCase {

    /** @var  StorageInterface $cache */
    private $cache;

    protected function setUp () {
        $this->setApplicationConfig(ArrayUtils::merge(
            include __DIR__ . '/../phpunit.config.php',
            include __DIR__ . '/../../../../config/application.config.php'
        ));
        $this->cache = $this->getApplicationServiceLocator()->get(StorageInterface::class);
        $this->cache->removeItem(TaskController::CACHE_KEY);
        parent::setUp();
    }

    /**
     * @covers TaskController::indexAction
     */
    public function testIndexActionCanBeAccessed () {
        $this->dispatch('/api/v1/task');
        $this->assertResponseStatusCode(200);
        $this->assertControllerName(TaskController::class);
        $this->assertControllerClass('TaskController');
        $this->assertMatchedRouteName('api/v1/tasks');
    }

    /**
     * @covers TaskController::indexAction
     */
    public function testIndexActionReturnsArray () {
        $this->dispatch('/api/v1/task');
        $content = $this->getResponse()->getContent();
        $this->assertArrayHasKey('data', json_decode($content, true));
    }

    public function testIndexActionCreatingCache () {
        $this->cache->removeItem(TaskController::CACHE_KEY);
        $this->dispatch('/api/v1/task');
        $this->assertTrue($this->cache->hasItem(TaskController::CACHE_KEY));
    }

    /**
     * @covers TaskController::indexAction
     */
    public function testIndexActionReturnsRightTasks () {
        $this->dispatch('/api/v1/task');
        $content = json_decode($this->getResponse()->getContent(), true);
        $data = $content['data'];
        foreach ($data as $item) {
            $this->assertArrayHasKey('id', $item);
            $this->assertArrayHasKey('title', $item);
            $this->assertArrayHasKey('date', $item);
        }
    }

    /**
     * @covers TaskController::editAction
     */
    public function testEditActionCanBeAccessed () {
        $this->dispatch('/api/v1/task/1');
        $this->assertResponseStatusCode(200);
        $this->assertControllerName(TaskController::class);
        $this->assertControllerClass('TaskController');
        $this->assertMatchedRouteName('api/v1/task');
    }

    /**
     * @covers TaskController::editAction
     */
    public function testEditActionReturns404 () {
        $this->dispatch('/api/v1/task/0');
        $this->assertResponseStatusCode(404);
        $this->assertControllerName(TaskController::class);
        $this->assertControllerClass('TaskController');
        $this->assertMatchedRouteName('api/v1/task');
    }

    /**
     * @covers TaskController::editAction
     */
    public function testEditActionReturnsJson () {
        $this->dispatch('/api/v1/task/1');
        $content = $this->getResponse()->getContent();
        $this->assertJson($content);
        $content = json_decode($content, true);
        $this->assertArrayHasKey('task', $content);
        $this->assertJson($content['task']);
    }

    protected function tearDown () {
        $this->cache->removeItem(TaskController::CACHE_KEY);
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}
